---
title: "massSight"
format:
  gfm:
    toc: true
---

<!-- README.md is generated from README.qmd. Please edit that file -->

```{r, include = FALSE}
devtools::load_all()
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "README-"
)
options(cli.hyperlink = FALSE)
```

<img src="man/figures/massSight.png" align="right" width="30%"/></a>

[![](https://zenodo.org/badge/608216683.svg)](https://zenodo.org/badge/latestdoi/608216683)

`massSight` is an R package for combining and scaling of LC-MS metabolomics data.

-   Citation: if you use `massSight`, please cite our manuscript: Chiraag Gohel and Ali Rahnavard. (2023). massSight: Metabolomics meta-analysis through multi-study data scaling, integration, and harmonization. <https://github.com/omicsEye/massSight>

## Examples {#examples}

Examples and extensive documentation can be found [here](omicseye.github.io/massSight/)

## Description {#description}

## Installation {#installation}

```{r, eval = F}         
devtools::install_github("omicsEye/massSight")
```

## Data Preparation {#data-preparation}

`massSight` works with the output of LC-MS experiments, which should contain columns corresponding to:

1.  Compound ID
2.  Retention Time
3.  Mass to Charge Ratio
4.  (Optional) Average Intensity across all samples
5.  (Optional) Metabolite Name

```{r, eval = F}
data(hp1)
head(hp1) |>
  knitr::kable()
```

### The `massSight` Object {#ms-obj}

`massSight` creates and uses the `MSObject` class to store data and results pertaining to individual LC-MS experiments. Prior to alignment, LC-MS data frames or tibbles should be converted into an `MSObject` using `create_ms_obj`:

```{r}
data(hp1)
data(hp2)

ms1 <-
  create_ms_obj(
    df = hp1,
    name = "hp1",
    id_name = "Compound_ID",
    rt_name = "RT",
    mz_name = "MZ",
    int_name = "Intensity"
  )

ms2 <-
  create_ms_obj(
    df = hp2,
    name = "hp2",
    id_name = "Compound_ID",
    rt_name = "RT",
    mz_name = "MZ",
    int_name = "Intensity"
  )
```

An `MSObject` provides the following functions:

* `raw_df()` to access the experiment's raw LC-MS data 
* `isolated()` to access the experiment's isolated metabolites, which is important for downstream alignment tasks
* `scaled_df()` to access the experiment's scaled LC-MS data
* `consolidated()` to access the experiment's consolidated data
* `metadata()` to access the experiment's metadata

```{r}
ms2 |>
  raw_df() |>
  head() |>
  knitr::kable(format = "simple")
```

## Alignment {#align}

### `auto_combine()`

Alignment is performed using `auto_combine()`

```{r, eval = T, cache = T}
aligned <- auto_combine(
  ms1 = ms1,
  ms2 = ms2
)
```

More information on the `auto_combine()` function can be found in the [package documentation](https://omicseye.github.io/massSight/reference/auto_combine.html)

### `ml_match()` {#ml_match}

```{r, eval = F}
ml_match_aligned <- ml_match(ms1, 
                             ms2, 
                             mz_thresh = 15, 
                             rt_thresh = 0.5, 
                             seed = 72)
```

### Results

Results from an alignment function are stored as a `MergedMSObject`. This object contains the following slots:

- `all_matched()`: All of the final matched metabolites between the two datasets. This is the main result of the various matching functions.

```{r}
all_matched(aligned) |>
  head() |>
  knitr::kable()
```

- `iso_matched()`: The matched isolated metabolites between the two datasets.

```{r}
iso_matched(aligned) |> 
  head() |>
  knitr::kable()
```



### Plotting results from alignment

```{r, eval = F}
final_plots(aligned)
```

![](man/figures/final_plot_out.png)

## Dev Instructions {#dev-instrutions}

### Installation

1.  Clone/pull `massSight`
2.  Open the R project `massSight.Rproj`
3.  Build package using `devtools::build()`
4.  Install package using `devtools::install()`
