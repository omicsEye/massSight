[{"path":[]},{"path":"https://omicseye.github.io/massSight/CLAUDE.html","id":"commands","dir":"","previous_headings":"","what":"Commands","title":"CLAUDE.md - massSight R Package Guide","text":"Install: devtools::install() Document: devtools::document() Check: devtools::check() Run tests: devtools::test() testthat::test_package(\"massSight\") Run specific test file: testthat::test_file(\"tests/testthat/test-file.R\") Run filtered tests: devtools::test(filter=\"test_name\") Lint package: lintr::lint_package() Lint file: lintr::lint(\"R/filename.R\")","code":""},{"path":"https://omicseye.github.io/massSight/CLAUDE.html","id":"style-guidelines","dir":"","previous_headings":"","what":"Style Guidelines","title":"CLAUDE.md - massSight R Package Guide","text":"Structure: Standard R package roxygen2 documentation Classes: S4 system (MSObject, MergedMSObject) Naming: Functions use snake_case, classes use PascalCase Indentation: 2 spaces defined .Rproj Imports: Use explicit namespace qualification :: Parameters: Validate checkmate package Errors: Use stopifnot() informative messages Documentation: Use roxygen2 markdown Testing: Use testthat package descriptive expectations Features: C++ integration Rcpp, pipe operator magrittr","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to massSight","title":"Contributing to massSight","text":"outlines propose change massSight. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to massSight","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to massSight","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to massSight","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"omicsEye/massSight\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to massSight","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://omicseye.github.io/massSight/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to massSight","text":"Please note massSight project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://omicseye.github.io/massSight/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 massSight authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BT-474 Breast Cancer Cell Line Analysis","text":"analysis examines two independent LC-MS datasets BT-474 breast cancer cell lines treated fatty acid synthesis inhibitors. ’ll use massSight integrate datasets perform comprehensive downstream analysis including differential expression, pathway analysis, multivariate statistical modeling. data can downloaded .","code":""},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"data-import-and-processing","dir":"Articles","previous_headings":"","what":"Data Import and Processing","title":"BT-474 Breast Cancer Cell Line Analysis","text":"First, ’ll import data original BT-474 files create massSight objects:","code":"bt_directories <- list.dirs(\"/path/to/bt-474\", recursive = FALSE) |>   list.dirs(recursive = FALSE) |>   list.dirs(recursive = FALSE) # Create named list using directory structure bt_data <- bt_directories |>   purrr::map(\\(path) {     # Extract sample name and polarity from path     parts <- str_split(path, \"/\")[[1]]     sample_id <- parts[length(parts) - 2] # e.g. \"st003147\"     polarity <- str_extract(parts[length(parts) - 1], \"(?<=-)\\\\w+\") # extracts \"neg\" from \"pcpfm-neg\"     name <- paste(sample_id, polarity, sep = \"_\") # creates \"st003147_neg\"      raw_table <- read_delim(paste0(path, \"/output/preferred_no_blanks_Feature_table.tsv\")) |>       clean_names()     normalized_table <- read_delim(paste0(path, \"/output/normalized_Feature_table.tsv\")) |>       clean_names()     # Get the asari project directory by finding the directory matching the pattern     asari_dir <- list.files(path, pattern = \"asari.*project.*\", full.names = TRUE)     annotations <- read_delim(file.path(asari_dir, \"Feature_annotation.tsv\")) |>       clean_names()      ms_data <- tibble(         id_number = normalized_table$id_number,         mz = raw_table$mz,         rt = raw_table$rtime/60,         intensity = normalized_table$peak_area     ) |>         left_join(             annotations |>                 select(peak_id_number, emp_cpd_ion_relation, name_1st_guess),             by = c(\"id_number\" = \"peak_id_number\")         )          # Filter for specific adducts based on polarity     if (polarity == \"neg\") {         ms_data <- ms_data |>             filter(emp_cpd_ion_relation == \"M0,M-H-\")     } else {         ms_data <- ms_data |>             filter(emp_cpd_ion_relation == \"M0,M+H+\")     }      list(       name = name,       ms_data = ms_data,       raw_table = raw_table,       normalized_table = normalized_table,       annotations = annotations     )   }) |>   set_names(map_chr(bt_directories, \\(path) {     parts <- str_split(path, \"/\")[[1]]     sample_id <- parts[length(parts) - 2]     polarity <- str_extract(parts[length(parts) - 1], \"(?<=-)\\\\w+\")     paste(sample_id, polarity, sep = \"_\")   })) #> Rows: 6201 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (19): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 6201 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (19): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 10280 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 6583 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (19): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 6583 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (19): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 11165 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9403 Columns: 29 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (28): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9403 Columns: 29 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (28): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 15260 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9033 Columns: 29 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (28): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9033 Columns: 29 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (28): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 13445 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 10260 Columns: 30 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (29): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 10260 Columns: 30 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (29): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 47166 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9990 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (31): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 9990 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (1): id_number #> dbl (31): mz, rtime, rtime_left_base, rtime_right_base, parent_masstrack_id,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 50499 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (7): [peak]id_number, [EmpCpd]interim_id            , [EmpCpd]ion_relati... #> dbl (4): mz, rtime, apex(scan number), neutral_formula_mass             #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"creating-masssight-objects","dir":"Articles","previous_headings":"","what":"Creating massSight Objects","title":"BT-474 Breast Cancer Cell Line Analysis","text":"Transform data massSight objects alignment:","code":"ms_objects <- bt_data |>     map(\\(x) {         create_ms_obj(             x$ms_data,             name = x$name,             id_name = \"id_number\",             mz_name = \"mz\",             rt_name = \"rt\",             int_name = \"intensity\",             metab_name = \"name_1st_guess\"         )     })"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"aligning-datasets-with-masssight","dir":"Articles","previous_headings":"","what":"Aligning Datasets with massSight","title":"BT-474 Breast Cancer Cell Line Analysis","text":"Use mass_combine function align metabolites across datasets:","code":"# Negative mode datasets neg_out <- mass_combine(ms_objects$st003147_neg,     ms_objects$st003148_neg,     log = NULL ) #> Optimizing parameters using Bayesian optimization... #> Initializing optimization... #> Optimization complete. Final score: 0.950 #>  #> Optimal parameters: #>   RT delta: 0.984 #>   MZ delta: 10.935 #>   RT isolation threshold: 0.010 #>   MZ isolation threshold: 1.765 #>   Alpha rank: 0.013 #>   Alpha RT: 1.855 #>   Alpha MZ: 0.217  # Positive mode datasets pos_out <- mass_combine(ms_objects$st003147_pos,     ms_objects$st003148_pos,     log = NULL ) #> Optimizing parameters using Bayesian optimization... #> Initializing optimization... #> Optimization complete. Final score: 0.948 #>  #> Optimal parameters: #>   RT delta: 1.000 #>   MZ delta: 15.755 #>   RT isolation threshold: 0.088 #>   MZ isolation threshold: 4.405 #>   Alpha rank: -1.988 #>   Alpha RT: 0.756 #>   Alpha MZ: 1.999  # Visualize alignment results final_plots(neg_out) final_plots(pos_out)"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"loading-and-processing-sample-metadata","dir":"Articles","previous_headings":"","what":"Loading and Processing Sample Metadata","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Load metadata metadata_47_pos <- jsonlite::fromJSON(\"/Users/chiraag/Box/massSight/data/bt-474/st003147/positive.json\") metadata_47_neg <- jsonlite::fromJSON(\"/Users/chiraag/Box/massSight/data/bt-474/st003147/negative.json\") metadata_48_pos <- jsonlite::fromJSON(\"/Users/chiraag/Box/massSight/data/bt-474/st003148/positive.json\") metadata_48_neg <- jsonlite::fromJSON(\"/Users/chiraag/Box/massSight/data/bt-474/st003148/negative.json\")  # Process metadata metadata_47_neg <- bind_cols(     \"id\" = metadata_47_neg$SUBJECT_SAMPLE_FACTORS$`Sample ID`,     metadata_47_neg$SUBJECT_SAMPLE_FACTORS$Factors ) |>     as_tibble() |>     mutate(study = \"47\") |>     clean_names()  metadata_48_neg <- bind_cols(     \"id\" = metadata_48_neg$SUBJECT_SAMPLE_FACTORS$`Sample ID`,     metadata_48_neg$SUBJECT_SAMPLE_FACTORS$Factors ) |>     as_tibble() |>     mutate(study = \"48\") |>     clean_names()  metadata_47_pos <- bind_cols(     \"id\" = metadata_47_pos$SUBJECT_SAMPLE_FACTORS$`Sample ID`,     metadata_47_pos$SUBJECT_SAMPLE_FACTORS$Factors ) |>     as_tibble() |>     mutate(study = \"47\") |>     clean_names()  metadata_48_pos <- bind_cols(     \"id\" = metadata_48_pos$SUBJECT_SAMPLE_FACTORS$`Sample ID`,     metadata_48_pos$SUBJECT_SAMPLE_FACTORS$Factors ) |>     as_tibble() |>     mutate(study = \"48\") |>     clean_names()  # Combine metadata pos_metadata <- bind_rows(metadata_47_pos, metadata_48_pos) |>     mutate(drug_treatment = ifelse(drug_treatment == \"NA\" | drug_treatment == \"Vehicle\", \"control\", drug_treatment)) |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\")))  neg_metadata <- bind_rows(metadata_47_neg, metadata_48_neg) |>     mutate(drug_treatment = ifelse(drug_treatment == \"NA\" | drug_treatment == \"Vehicle\", \"control\", drug_treatment)) |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\")))"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"extracting-and-integrating-feature-data","dir":"Articles","previous_headings":"","what":"Extracting and Integrating Feature Data","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Extract normalized features instead of raw st003147_neg <- bt_data$st003147_neg$normalized_table |>     select(id_number, contains(\"m22\")) |>     rename(\"Compound_ID_st003147_neg\" = id_number)  st003148_neg <- bt_data$st003148_neg$normalized_table |>     select(id_number, contains(\"bt474\")) |>     rename(\"Compound_ID_st003148_neg\" = id_number)  # Extract positive mode features st003147_pos <- bt_data$st003147_pos$normalized_table |>     select(id_number, contains(\"m22\")) |>     rename(\"Compound_ID_st003147_pos\" = id_number)  st003148_pos <- bt_data$st003148_pos$normalized_table |>     select(id_number, contains(\"bt474\")) |>     rename(\"Compound_ID_st003148_pos\" = id_number)  # Get feature mapping from mass_combine results feature_mapping <- neg_out |>     get_unique_matches() |>     select(Compound_ID_st003147_neg, Compound_ID_st003148_neg, rep_Compound_ID,             Metabolite_st003147_neg, Metabolite_st003148_neg)  # Get unique matches from negative mode dataset full_neg <- neg_out |>     get_unique_matches() |>     left_join(st003147_neg, by = \"Compound_ID_st003147_neg\") |>     left_join(st003148_neg, by = \"Compound_ID_st003148_neg\") |>     select(contains(\"Compound_ID\"), contains(\"RT\"), contains(\"MZ\"), contains(\"Metabolite\"), contains(\"m22\"), contains(\"bt474\")) |>     pivot_longer(         cols = c(contains(\"m22\"), contains(\"bt474\")),         names_to = \"sample\",         values_to = \"intensity\"     ) |>     left_join(         neg_metadata |>             mutate(id = tolower(gsub(                 \"-\", \"_\",                 ifelse(grepl(\"^[0-9]\", id),                     paste0(\"x\", id),                     id                 )             ))),         by = c(\"sample\" = \"id\")     )  # Filter for high-prevalence features high_prevalence_neg <- full_neg |>     group_by(study, rep_Compound_ID) |>     summarise(         n_samples = n(),         n_detected = sum(!is.na(intensity) & intensity > 0),         prevalence = n_detected / n_samples,         .groups = \"drop\"     ) |>     group_by(rep_Compound_ID) |>     filter(n() == 2,  # Ensure compound appears in both studies            all(prevalence > 0.8)) |>  # High prevalence in both     select(study, rep_Compound_ID) |>     left_join(full_neg, by = c(\"study\", \"rep_Compound_ID\")) |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\")))  # Get unique matches from positive mode dataset (similar process) # Get unique matches from positive mode dataset full_pos <- pos_out |>     get_unique_matches() |>     left_join(st003147_pos, by = \"Compound_ID_st003147_pos\") |>     left_join(st003148_pos, by = \"Compound_ID_st003148_pos\") |>     select(contains(\"Compound_ID\"), contains(\"RT\"), contains(\"MZ\"), contains(\"Metabolite\"), contains(\"m22\"), contains(\"bt474\")) |>     pivot_longer(         cols = c(contains(\"m22\"), contains(\"bt474\")),         names_to = \"sample\",          values_to = \"intensity\"     ) |>     left_join(         pos_metadata |>             mutate(id = tolower(gsub(                 \"-\", \"_\",                 ifelse(grepl(\"^[0-9]\", id),                     paste0(\"x\", id),                     id                 )             ))),         by = c(\"sample\" = \"id\")     )  # Filter for high-prevalence features high_prevalence_pos <- full_pos |>     group_by(study, rep_Compound_ID) |>     summarise(         n_samples = n(),         n_detected = sum(!is.na(intensity) & intensity > 0),         prevalence = n_detected / n_samples,         .groups = \"drop\"     ) |>     group_by(rep_Compound_ID) |>     filter(n() == 2,  # Ensure compound appears in both studies            all(prevalence > 0.8)) |>  # High prevalence in both     select(study, rep_Compound_ID) |>     left_join(full_pos, by = c(\"study\", \"rep_Compound_ID\")) |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\")))"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"differential-expression-analysis","dir":"Articles","previous_headings":"","what":"Differential Expression Analysis","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Negative mode linear modeling lm_neg <- high_prevalence_neg |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\")),            study = factor(study, levels = c(\"47\", \"48\"))) |>     group_by(rep_Compound_ID) |>     nest() |>     mutate(         model = map(data, ~lm(log2(intensity + 1) ~ drug_treatment + study, data = .)),         tidied = map(model, broom::tidy)     ) |>     unnest(tidied) |>     select(rep_Compound_ID, term, estimate, std.error, statistic, p.value) |>     mutate(         fdr = p.adjust(p.value, method = \"BH\")     )  # Filter for GSK2194069 results gsk_results_neg <- lm_neg |>     filter(term == \"drug_treatment1 uM GSK2194069\") |>     left_join(         neg_out |>             get_unique_matches() |>             select(                 rep_Compound_ID,                 contains(\"Compound_ID\"),                 contains(\"Metabolite\"),                 contains(\"MZ\"),                 contains(\"RT\")             ),         by = \"rep_Compound_ID\"     )  # Filter for Fasnall results fas_results_neg <- lm_neg |>     filter(term == \"drug_treatment1 uM Fasnall\") |>     left_join(         neg_out |>             get_unique_matches() |>             select(                 rep_Compound_ID,                 contains(\"Compound_ID\"),                 contains(\"Metabolite\"),                 contains(\"MZ\"),                 contains(\"RT\")             ),         by = \"rep_Compound_ID\"     )  # Summary of differential metabolites sig_threshold <- 0.05 fc_threshold <- 1  gsk_sig_metabolites <- gsk_results_neg |>      filter(fdr < sig_threshold & abs(estimate) > fc_threshold) fas_sig_metabolites <- fas_results_neg |>      filter(fdr < sig_threshold & abs(estimate) > fc_threshold)  cat(\"GSK2194069 significant metabolites:\", nrow(gsk_sig_metabolites), \"\\n\") #> GSK2194069 significant metabolites: 7 cat(\"Fasnall significant metabolites:\", nrow(fas_sig_metabolites), \"\\n\") #> Fasnall significant metabolites: 34  # Create similar analysis for positive mode data # Fit linear models for positive mode data lm_pos <- full_pos |>     mutate(drug_treatment = factor(drug_treatment, levels = c(\"control\", \"1 uM Fasnall\",\"1 uM GSK2194069\"))) |>     group_by(rep_Compound_ID) |>     nest() |>     mutate(         model = map(data, \\(d) lm(log2(intensity + 1) ~ drug_treatment + study, data = d)),         tidied = map(model, broom::tidy)     ) |>     unnest(tidied) |>     select(rep_Compound_ID, term, estimate, std.error, statistic, p.value) |>     mutate(         fdr = p.adjust(p.value, method = \"BH\")     )  # Filter for GSK2194069 results gsk_results_pos <- lm_pos |>     filter(term == \"drug_treatment1 uM GSK2194069\") |>     left_join(         pos_out |>             get_unique_matches() |>             select(                 rep_Compound_ID,                 contains(\"Metabolite\"),                 contains(\"MZ\"),                 contains(\"RT\")             ),         by = \"rep_Compound_ID\"     )  # Filter for Fasnall results fas_results_pos <- lm_pos |>     filter(term == \"drug_treatment1 uM Fasnall\") |>     left_join(         pos_out |>             get_unique_matches() |>             select(                 rep_Compound_ID,                 contains(\"Metabolite\"),                 contains(\"MZ\"),                 contains(\"RT\")             ),         by = \"rep_Compound_ID\"     )  # Summary of differential metabolites for positive mode gsk_sig_metabolites_pos <- gsk_results_pos |>      filter(fdr < sig_threshold & abs(estimate) > fc_threshold) fas_sig_metabolites_pos <- fas_results_pos |>      filter(fdr < sig_threshold & abs(estimate) > fc_threshold)  cat(\"GSK2194069 significant metabolites (positive mode):\", nrow(gsk_sig_metabolites_pos), \"\\n\") #> GSK2194069 significant metabolites (positive mode): 26 cat(\"Fasnall significant metabolites (positive mode):\", nrow(fas_sig_metabolites_pos), \"\\n\") #> Fasnall significant metabolites (positive mode): 53"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"volcano-plots-for-visualization","dir":"Articles","previous_headings":"","what":"Volcano Plots for Visualization","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Negative mode GSK2194069 plot neg_gsk_plot <- gsk_results_neg |>     mutate(         significant = abs(estimate) > fc_threshold & fdr < sig_threshold,         label = ifelse(abs(estimate) > 3 & fdr < sig_threshold,             paste0(                 \"ST003147: \",                 ifelse(is.na(Metabolite_st003147_neg),                      paste0(\"m/z:\", round(MZ_st003147_neg, 4), \" RT:\", round(RT_st003147_neg, 2)),                     Metabolite_st003147_neg),                 \"\\n\",                 \"ST003148: \",                 ifelse(is.na(Metabolite_st003148_neg),                     paste0(\"m/z:\", round(MZ_st003148_neg, 4), \" RT:\", round(RT_st003148_neg, 2)),                     Metabolite_st003148_neg)             ),             \"\")     ) |>     ggplot(aes(x = estimate, y = -log10(fdr))) +     geom_hline(yintercept = -log10(sig_threshold), linetype = \"dashed\", size = 0.3) +     geom_vline(xintercept = c(-fc_threshold, fc_threshold), linetype = \"dashed\", size = 0.3) +     geom_point(aes(color = significant), size = 1.2, alpha = 0.7) +     geom_label_repel(         aes(label = label),         max.overlaps = 20,         size = 2.5,         force = 10     ) +     scale_color_manual(values = c(\"grey\", \"red\")) +     labs(         x = \"Log2 Fold Change (GSK2194069 vs Control)\",         y = \"-log10(FDR)\",         title = \"Negative Mode - GSK2194069\"     ) +     theme_minimal() +     theme(legend.position = \"none\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  # Negative mode Fasnall plot neg_fas_plot <- fas_results_neg |>     mutate(         significant = abs(estimate) > fc_threshold & fdr < sig_threshold,         label = ifelse(abs(estimate) > 3 & fdr < sig_threshold,             paste0(                 \"ST003147: \",                 ifelse(is.na(Metabolite_st003147_neg),                      paste0(\"m/z:\", round(MZ_st003147_neg, 4), \" RT:\", round(RT_st003147_neg, 2)),                     Metabolite_st003147_neg),                 \"\\n\",                 \"ST003148: \",                 ifelse(is.na(Metabolite_st003148_neg),                     paste0(\"m/z:\", round(MZ_st003148_neg, 4), \" RT:\", round(RT_st003148_neg, 2)),                     Metabolite_st003148_neg)             ),             \"\")     ) |>     ggplot(aes(x = estimate, y = -log10(fdr))) +     geom_hline(yintercept = -log10(sig_threshold), linetype = \"dashed\", size = 0.3) +     geom_vline(xintercept = c(-fc_threshold, fc_threshold), linetype = \"dashed\", size = 0.3) +     geom_point(aes(color = significant), size = 1.2, alpha = 0.7) +     geom_label_repel(         aes(label = label),         max.overlaps = 20,         size = 2.5,         force = 10     ) +     scale_color_manual(values = c(\"grey\", \"red\")) +     labs(         x = \"Log2 Fold Change (Fasnall vs Control)\",         y = \"-log10(FDR)\",          title = \"Negative Mode - Fasnall\"     ) +     theme_minimal() +     theme(legend.position = \"none\")  # Positive mode GSK2194069 plot pos_gsk_plot <- gsk_results_pos |>     mutate(         significant = abs(estimate) > fc_threshold & fdr < sig_threshold,         label = ifelse(abs(estimate) > 3 & fdr < sig_threshold,             paste0(                 \"ST003147: \",                 ifelse(is.na(Metabolite_st003147_pos),                      paste0(\"m/z:\", round(MZ_st003147_pos, 4), \" RT:\", round(RT_st003147_pos, 2)),                     Metabolite_st003147_pos),                 \"\\n\",                 \"ST003148: \",                 ifelse(is.na(Metabolite_st003148_pos),                     paste0(\"m/z:\", round(MZ_st003148_pos, 4), \" RT:\", round(RT_st003148_pos, 2)),                     Metabolite_st003148_pos)             ),             \"\")     ) |>     ggplot(aes(x = estimate, y = -log10(fdr))) +     geom_hline(yintercept = -log10(sig_threshold), linetype = \"dashed\", size = 0.3) +     geom_vline(xintercept = c(-fc_threshold, fc_threshold), linetype = \"dashed\", size = 0.3) +     geom_point(aes(color = significant), size = 1.2, alpha = 0.7) +     geom_label_repel(         aes(label = label),         max.overlaps = 20,         size = 2.5,         force = 10     ) +     scale_color_manual(values = c(\"grey\", \"red\")) +     labs(         x = \"Log2 Fold Change (GSK2194069 vs Control)\",         y = \"-log10(FDR)\",         title = \"Positive Mode - GSK2194069\"     ) +     theme_minimal() +     theme(legend.position = \"none\")  # Positive mode Fasnall plot pos_fas_plot <- fas_results_pos |>     mutate(         significant = abs(estimate) > fc_threshold & fdr < sig_threshold,         label = ifelse(abs(estimate) > 3 & fdr < sig_threshold,             paste0(                 \"ST003147: \",                 ifelse(is.na(Metabolite_st003147_pos),                      paste0(\"m/z:\", round(MZ_st003147_pos, 4), \" RT:\", round(RT_st003147_pos, 2)),                     Metabolite_st003147_pos),                 \"\\n\",                 \"ST003148: \",                 ifelse(is.na(Metabolite_st003148_pos),                     paste0(\"m/z:\", round(MZ_st003148_pos, 4), \" RT:\", round(RT_st003148_pos, 2)),                     Metabolite_st003148_pos)             ),             \"\")     ) |>     ggplot(aes(x = estimate, y = -log10(fdr))) +     geom_hline(yintercept = -log10(sig_threshold), linetype = \"dashed\", size = 0.3) +     geom_vline(xintercept = c(-fc_threshold, fc_threshold), linetype = \"dashed\", size = 0.3) +     geom_point(aes(color = significant), size = 1.2, alpha = 0.7) +     geom_label_repel(         aes(label = label),         max.overlaps = 20,         size = 2.5,         force = 10     ) +     scale_color_manual(values = c(\"grey\", \"red\")) +     labs(         x = \"Log2 Fold Change (Fasnall vs Control)\",         y = \"-log10(FDR)\",         title = \"Positive Mode - Fasnall\"     ) +     theme_minimal() +     theme(legend.position = \"none\")  # Combine all plots plot_grid(neg_gsk_plot, neg_fas_plot, pos_gsk_plot, pos_fas_plot, ncol = 2) #> Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Warning: ggrepel: 11 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> ggrepel: 11 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"enhanced-visualization-with-heatmaps","dir":"Articles","previous_headings":"","what":"Enhanced Visualization with Heatmaps","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Extract top differential metabolites for heatmap top_metabolites <- rbind(     gsk_results_neg |> filter(fdr < 0.01, abs(estimate) > 1.5) |> head(30),     fas_results_neg |> filter(fdr < 0.01, abs(estimate) > 1.5) |> head(30) ) |>     distinct(rep_Compound_ID, .keep_all = TRUE)   # Create expression matrix for heatmap heatmap_data <- high_prevalence_neg |>     filter(rep_Compound_ID %in% top_metabolites$rep_Compound_ID) |>     group_by(rep_Compound_ID, drug_treatment, study) |>     summarise(avg_intensity = mean(log2(intensity + 1), na.rm = TRUE), .groups = \"drop\") |>     unite(\"group\", c(drug_treatment, study), remove = FALSE) |>     pivot_wider(id_cols = rep_Compound_ID, names_from = group, values_from = avg_intensity) |>     as.data.frame()  row_names <- top_metabolites |>     select(rep_Compound_ID, Metabolite_st003147_neg) |>     mutate(name = ifelse(is.na(Metabolite_st003147_neg),                           paste0(\"Metabolite \", rep_Compound_ID),                           Metabolite_st003147_neg)) |>     pull(name)  # Convert to matrix for heatmap mat <- as.matrix(heatmap_data[,-1]) rownames(mat) <- row_names  # Create annotation for columns treatment_colors <- c(\"control\" = \"grey80\", \"1 uM Fasnall\" = \"skyblue\", \"1 uM GSK2194069\" = \"orange\") study_colors <- c(\"47\" = \"purple\", \"48\" = \"green\")  col_anno <- data.frame(     Treatment = gsub(\"_.*$\", \"\", colnames(mat)),     Study = gsub(\"^.*_\", \"\", colnames(mat)) )   column_ha <- ComplexHeatmap::HeatmapAnnotation(     Treatment = col_anno$Treatment,     Study = col_anno$Study,     col = list(         Treatment = treatment_colors,         Study = study_colors     ) )  # Draw heatmap hm <- ComplexHeatmap::Heatmap(     mat,     name = \"log2 Intensity\",     column_title = \"Top Differential Metabolites\",     cluster_rows = TRUE,     cluster_columns = TRUE,     show_row_names = TRUE,     show_column_names = FALSE,     top_annotation = column_ha,     row_names_gp = grid::gpar(fontsize = 8) )  # Display heatmap hm"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"multivariate-analysis","dir":"Articles","previous_headings":"","what":"Multivariate Analysis","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Prepare data for PLS-DA plsda_data <- high_prevalence_neg |>     select(rep_Compound_ID, sample, intensity, drug_treatment, study) |>     pivot_wider(         id_cols = c(sample, drug_treatment, study),         names_from = rep_Compound_ID,         values_from = intensity,         values_fill = 0     )  # Extract X (metabolites) and Y (treatment groups) matrices X <- as.matrix(log2(plsda_data[, 4:ncol(plsda_data)] + 1)) Y <- plsda_data$drug_treatment  # Perform PLS-DA plsda_result <- mixOmics::plsda(X, Y, ncomp = 5)  # Plot results mixOmics::plotIndiv(plsda_result,            group = Y,           legend = TRUE,           title = \"PLS-DA of BT-474 Treatments\",           ellipse = TRUE,           ind.names = TRUE) # Variable importance vip_scores <- mixOmics::vip(plsda_result) top_vip <- data.frame(     feature = colnames(X),     VIP = vip_scores[,1] ) |>     arrange(desc(VIP)) |>     head(20)  # Plot VIP scores ggplot(top_vip, aes(x = reorder(feature, VIP), y = VIP)) +     geom_bar(stat = \"identity\", fill = \"skyblue\") +     coord_flip() +     labs(x = \"Metabolite Feature\", y = \"VIP Score\",           title = \"Top 20 Features by Variable Importance\")"},{"path":"https://omicseye.github.io/massSight/articles/bt-474_analysis.html","id":"exploring-treatment-specific-effects","dir":"Articles","previous_headings":"","what":"Exploring Treatment-Specific Effects","title":"BT-474 Breast Cancer Cell Line Analysis","text":"","code":"# Compare GSK vs Fasnall effects comparison_df <- inner_join(     gsk_results_neg |> select(rep_Compound_ID, gsk_estimate = estimate, gsk_fdr = fdr),     fas_results_neg |> select(rep_Compound_ID, fas_estimate = estimate, fas_fdr = fdr),     by = \"rep_Compound_ID\" ) |>     mutate(         gsk_significant = gsk_fdr < sig_threshold & abs(gsk_estimate) > fc_threshold,         fas_significant = fas_fdr < sig_threshold & abs(fas_estimate) > fc_threshold,         both_significant = gsk_significant & fas_significant,         gsk_only = gsk_significant & !fas_significant,         fas_only = fas_significant & !gsk_significant,         effect_category = case_when(             both_significant & sign(gsk_estimate) == sign(fas_estimate) ~ \"Shared Effect\",             both_significant & sign(gsk_estimate) != sign(fas_estimate) ~ \"Opposite Effect\",             gsk_only ~ \"GSK-Specific\",             fas_only ~ \"Fasnall-Specific\",             TRUE ~ \"Non-Significant\"         )     )  # Summarize comparison results comparison_summary <- comparison_df |>     group_by(effect_category) |>     summarise(count = n()) |>     arrange(desc(count))  # Scatter plot comparing treatments comparison_plot <- ggplot(comparison_df, aes(x = gsk_estimate, y = fas_estimate, color = effect_category)) +     geom_point(alpha = 0.7) +     geom_hline(yintercept = 0, linetype = \"dashed\", size = 0.3) +     geom_vline(xintercept = 0, linetype = \"dashed\", size = 0.3) +     scale_color_brewer(palette = \"Set1\") +     labs(         x = \"Log2 Fold Change (GSK2194069)\",         y = \"Log2 Fold Change (Fasnall)\",         title = \"Comparison of Treatment Effects\",         color = \"Effect Category\"     ) +     theme_minimal()  # Display comparison plot comparison_plot"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Alignment Tutorial using iHMP Data","text":"tutorial, analyzing two datasets NIH human microbiome project processed using different techniques. provide function (load_ihmp_data()) automatically creates data directory, downloads datasets . datasets can also downloaded manually. first dataset can downloaded . second dataset can downloaded . First, massSight can installed via devtools: , can load necessary libraries can download iHMP datasets.","code":"install.packages(\"devtools\")  devtools::install_github(\"omicsEye/massSight\") library(massSight) library(ggplot2) load_ihmp_data()"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"loading-ihmp-data","dir":"Articles","previous_headings":"","what":"Loading iHMP data","title":"Alignment Tutorial using iHMP Data","text":"can use load_data() function import LC-MS data excel format variety standard pre-processed formats. can use filter_intensities() function perform quality control remove metabolites low prevalence.","code":"loaded_data <-   massSight::load_data(     input = \"data/progenesis_ihmp.xlsx\",     type = \"all\",     sheet = 1,     id = \"Compound_ID\"   )  loaded_data$feature_metadata$MZ <-   as.numeric(loaded_data$feature_metadata$MZ) loaded_data$feature_metadata$RT <-   as.numeric(loaded_data$feature_metadata$RT) feature_metadata2 <-   loaded_data$feature_metadata[colnames(loaded_data$data), ] loaded_data$data <- loaded_data$data |>   t() |>   data.frame() hmp2_keep <-   filter_intensities(data = loaded_data$data, prevalence = .5) loaded_data$data <- loaded_data$data[hmp2_keep, ] feature_metadata2 <- feature_metadata2[hmp2_keep, ] feature_metadata2$Intensity <- rowMeans(loaded_data$data, na.rm = T) ref_input <-   feature_metadata2[(!is.na(feature_metadata2$MZ)) &     (!is.na(feature_metadata2$RT)), ]"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"create-a-masssight-object-for-the-first-dataset","dir":"Articles","previous_headings":"Loading iHMP data","what":"Create a massSight object for the first dataset","title":"Alignment Tutorial using iHMP Data","text":"now everything need create massSight object (MSObject). object serves container contains raw data, analyzed data, information regarding experiment. information MSObject, check documentation. can use raw_df() function access stored data created object. Let’s see looks like! process second dataset similarly. check column names see variable names used converting dataframe massSight object. dataset, sample intensity values begin column 7 end dataframe. load_data() function used omicsArt::numeric_dataframe() ensure converted dataframe columns numeric read dataframe columns various data types measure mean rows intensities need convert numeric. can create object C18_CD includes FFA metabolites processed Compound Discovery version","code":"hmp2_ms <- create_ms_obj(   df = ref_input,   name = \"iHMP\",   id_name = \"Compound_ID\",   rt_name = \"RT\",   mz_name = \"MZ\",   int_name = \"Intensity\",   metab_name = \"Metabolite\" ) hmp2_ms |>   raw_df() |>   head() |>   knitr::kable() C18_CD <- read.delim(   \"data/cd_c18n_ihmp.csv\",   sep = \",\",   header = TRUE,   fill = FALSE,   comment.char = \"\",   check.names = FALSE   # row.names = 1 ) colnames(C18_CD) |> head(10) #>  [1] \"Name\"                                       #>  [2] \"Annot. Source: MassList Search\"             #>  [3] \"Calc. MW\"                                   #>  [4] \"m/z\"                                        #>  [5] \"RT [min]\"                                   #>  [6] \"Area (Max.)\"                                #>  [7] \"Area: 0000h_XAV_iHMP2_FFA_PREFA01.raw (F1)\" #>  [8] \"Area: 0000i_XAV_iHMP2_FFA_PREFB01.raw (F2)\" #>  [9] \"Area: 0001_XAV_iHMP2_FFA_SM-6JWO4.raw (F3)\" #> [10] \"Area: 0002_XAV_iHMP2_FFA_SM-7CRWL.raw (F4)\" c18_keep <- filter_intensities(   data = C18_CD[, 7:ncol(C18_CD)],   prevalence = .5 ) C18_CD <- C18_CD[c18_keep, ] C18_CD$Intensity <-   rowMeans(C18_CD[, 7:dim(C18_CD)[2]],     na.rm = T   ) C18_CD$row_id <- rownames(C18_CD) ms_C18_CD <-   create_ms_obj(     df = C18_CD,     name = \"C18_CD\",     id_name = \"row_id\",     rt_name = \"RT [min]\",     mz_name = \"m/z\",     int_name = \"Intensity\",     metab_name = \"Name\"   )"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"quick-qc-check","dir":"Articles","previous_headings":"","what":"Quick QC Check","title":"Alignment Tutorial using iHMP Data","text":"can visualize distributions retention time mass charge ratio using distribution_plot()","code":"distribution_plot(hmp2_ms) distribution_plot(ms_C18_CD)"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"combining-datasets","dir":"Articles","previous_headings":"","what":"Combining Datasets","title":"Alignment Tutorial using iHMP Data","text":"auto_combine() function allows users combine two datasets via modeling RT m/z drift two experiments. information function, check documentation!","code":"aligned <- auto_combine(   ms1 = hmp2_ms,   ms2 = ms_C18_CD,   smooth_method = \"gam\",   log = NULL )"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Alignment Tutorial using iHMP Data","text":"Visualization alignment can performed via final_plots() function.  recommend use ggsave() package ggplot2 saving publication quality figures.","code":"final_plots(aligned) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> Warning: Removed 2222 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Removed 2222 rows containing missing values or values outside the scale range #> (`geom_point()`). ggsave(   filename = \"plots/final_smooth_ref_all.png\",   plot = final_smooth,   width = 7.2,   height = 3.5,   units = \"in\",   dpi = 300 )"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"using-only-c18-neg-as-a-reference","dir":"Articles","previous_headings":"","what":"Using only C18-neg as a reference","title":"Alignment Tutorial using iHMP Data","text":"","code":"ref_input_C18 <- ref_input[ref_input$Method == \"C18-neg\", ] ref_C18 <- create_ms_obj(   df = ref_input_C18,   name = \"iHMP_C18\",   id_name = \"Compound_ID\",   rt_name = \"RT\",   mz_name = \"MZ\",   int_name = \"Intensity\",   metab_name = \"Metabolite\" )"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"run-auto_combine-with-dbscan","dir":"Articles","previous_headings":"","what":"Run auto_combine with dbscan","title":"Alignment Tutorial using iHMP Data","text":"","code":"aligned_c18 <- auto_combine(   ms1 = ref_C18,   ms2 = ms_C18_CD,   smooth_method = \"gam\",   log = NULL )"},{"path":"https://omicseye.github.io/massSight/articles/iHMP_software_comp.html","id":"visualization-1","dir":"Articles","previous_headings":"","what":"Visualization","title":"Alignment Tutorial using iHMP Data","text":"","code":"final_plots(aligned_c18) #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> Warning: Removed 49 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Removed 49 rows containing missing values or values outside the scale range #> (`geom_point()`). ggsave(   filename = \"plots/final_smooth_ref_C18.png\",   width = 7.2,   height = 3.5,   units = \"in\",   dpi = 300 )"},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"read-data","dir":"Articles","previous_headings":"","what":"read data","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"iHMP publication: https://doi.org/10.1038/s41586-019-1237-9 Data : https://www.metabolomicsworkbench.org/data/DRCCStudySummary.php?Mode=SetupRawDataDownload&StudyID=ST000923 https://ibdmdb.org/tunnel/public/summary.html consolidated data two sources created single excel file method (HILIC-pos, HILIC-neg, C18-neg, C8-pos), can downloaded following link: https://gwu.box.com/s/i8fxlre70b0sbrdhp9sjjfautlmlwd6x PRISM pubcliation: https://doi.org/10.1038/s41564-018-0306-4 Data : https://www.metabolomicsworkbench.org/data/DRCCStudySummary.php?Mode=SetupRawDataDownload&StudyID=ST001000 PRISM data can downloaded following link: https://gwu.box.com/s/033vt0ieh3gucaw5f9as3fuvna7h1b4t","code":""},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"download-data","dir":"Articles","previous_headings":"read data","what":"Download data","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"","code":"# URLs to the Box files ihmp_url <- \"https://gwu.box.com/s/i8fxlre70b0sbrdhp9sjjfautlmlwd6x\" prism_url <- \"https://gwu.box.com/s/033vt0ieh3gucaw5f9as3fuvna7h1b4t\"  # Create a temporary directory to store the files temp_dir <- tempdir() ihmp_file <- file.path(temp_dir, \"HMP2_metabolomics.xlsx\") prism_file <- file.path(temp_dir, \"41564_2018_306_MOESM_combined3_4_ESM.xlsx\")  # Download the iHMP data if it's not already present if (!file.exists(ihmp_file)) {   download.file(ihmp_url, destfile = ihmp_file, mode = \"wb\") }  # Download the PRISM data if it's not already present if (!file.exists(prism_file)) {   download.file(prism_url, destfile = prism_file, mode = \"wb\") }"},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"load-ihmp-data","dir":"Articles","previous_headings":"read data","what":"Load iHMP data","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"","code":"# list of recent annotations published by Broad Institute # iHMP_C18n <- #  read_xlsx(\"data/iHMP/C18n_Metabolites_ID_AfterPublication_2021-05-17.xlsx\") # colnames(iHMP_C18n) <- #  c(\"Method\" , \"Compound_ID\" , \"MZ\"    , \"RT\" , \"Metabolite\") # iHMP_C18n$Intensity <- 0  # iHMP published data loaded_data <-   massSight::load_data(     input = \"data/HMP2_metabolomics.xlsx\",     type = \"all\",     sheet = 1,     id = \"Compound_ID\"   ) ## New names: ## • `` -> `...1` ## • `` -> `...2` ## • `` -> `...3` ## • `` -> `...4` ## • `` -> `...5` ## • `` -> `...6` ## • `` -> `...7` ## • `` -> `...8` ## • `` -> `...9` ## • `` -> `...10` ## • `` -> `...11` ## • `` -> `...12` ## • `` -> `...13` ## • `` -> `...14` ## • `` -> `...15` ## • `` -> `...16` ## • `` -> `...17` ## • `` -> `...18` ## • `` -> `...19` ## • `` -> `...20` ## • `` -> `...21` ## • `` -> `...22` ## • `` -> `...23` ## • `` -> `...24` ## • `` -> `...25` ## • `` -> `...26` ## • `` -> `...27` ## • `` -> `...28` ## • `` -> `...29` ## • `` -> `...30` ## • `` -> `...31` ## • `` -> `...32` ## • `` -> `...33` ## • `` -> `...34` ## • `` -> `...35` ## • `` -> `...36` ## • `` -> `...37` ## • `` -> `...38` ## • `` -> `...39` ## • `` -> `...40` ## • `` -> `...41` ## • `` -> `...42` ## • `` -> `...43` ## • `` -> `...44` ## • `` -> `...45` ## • `` -> `...46` ## • `` -> `...47` ## • `` -> `...48` ## • `` -> `...49` ## • `` -> `...50` ## • `` -> `...51` ## • `` -> `...52` ## • `` -> `...53` ## • `` -> `...54` ## • `` -> `...55` ## • `` -> `...56` ## • `` -> `...57` ## • `` -> `...58` ## • `` -> `...59` ## • `` -> `...60` ## • `` -> `...61` ## • `` -> `...62` ## • `` -> `...63` ## • `` -> `...64` ## • `` -> `...65` ## • `` -> `...66` ## • `` -> `...67` ## • `` -> `...68` ## • `` -> `...69` ## • `` -> `...70` ## • `` -> `...71` ## • `` -> `...72` ## • `` -> `...73` ## • `` -> `...74` ## • `` -> `...75` ## • `` -> `...76` ## • `` -> `...77` ## • `` -> `...78` ## • `` -> `...79` ## • `` -> `...80` ## • `` -> `...81` ## • `` -> `...82` ## • `` -> `...83` ## • `` -> `...84` ## • `` -> `...85` ## • `` -> `...86` ## • `` -> `...87` ## • `` -> `...88` ## • `` -> `...89` ## • `` -> `...90` ## • `` -> `...91` ## • `` -> `...92` ## • `` -> `...93` ## • `` -> `...94` ## • `` -> `...95` ## • `` -> `...96` ## • `` -> `...97` ## • `` -> `...98` ## • `` -> `...99` ## • `` -> `...100` ## • `` -> `...101` ## • `` -> `...102` ## • `` -> `...103` ## • `` -> `...104` ## • `` -> `...105` ## • `` -> `...106` ## • `` -> `...107` ## • `` -> `...108` ## • `` -> `...109` ## • `` -> `...110` ## • `` -> `...111` ## • `` -> `...112` ## • `` -> `...113` ## • `` -> `...114` ## • `` -> `...115` ## • `` -> `...116` ## • `` -> `...117` ## • `` -> `...118` ## • `` -> `...119` ## • `` -> `...120` ## • `` -> `...121` ## • `` -> `...122` ## • `` -> `...123` ## • `` -> `...124` ## • `` -> `...125` ## • `` -> `...126` ## • `` -> `...127` ## • `` -> `...128` ## • `` -> `...129` ## • `` -> `...130` ## • `` -> `...131` ## • `` -> `...132` ## • `` -> `...133` ## • `` -> `...134` ## • `` -> `...135` ## • `` -> `...136` ## • `` -> `...137` ## • `` -> `...138` ## • `` -> `...139` ## • `` -> `...140` ## • `` -> `...141` ## • `` -> `...142` ## • `` -> `...143` ## • `` -> `...144` ## • `` -> `...145` ## • `` -> `...146` ## • `` -> `...147` ## • `` -> `...148` ## • `` -> `...149` ## • `` -> `...150` ## • `` -> `...151` ## • `` -> `...152` ## • `` -> `...153` ## • `` -> `...154` ## • `` -> `...155` ## • `` -> `...156` ## • `` -> `...157` ## • `` -> `...158` ## • `` -> `...159` ## • `` -> `...160` ## • `` -> `...161` ## • `` -> `...162` ## • `` -> `...163` ## • `` -> `...164` ## • `` -> `...165` ## • `` -> `...166` ## • `` -> `...167` ## • `` -> `...168` ## • `` -> `...169` ## • `` -> `...170` ## • `` -> `...171` ## • `` -> `...172` ## • `` -> `...173` ## • `` -> `...174` ## • `` -> `...175` ## • `` -> `...176` ## • `` -> `...177` ## • `` -> `...178` ## • `` -> `...179` ## • `` -> `...180` ## • `` -> `...181` ## • `` -> `...182` ## • `` -> `...183` ## • `` -> `...184` ## • `` -> `...185` ## • `` -> `...186` ## • `` -> `...187` ## • `` -> `...188` ## • `` -> `...189` ## • `` -> `...190` ## • `` -> `...191` ## • `` -> `...192` ## • `` -> `...193` ## • `` -> `...194` ## • `` -> `...195` ## • `` -> `...196` ## • `` -> `...197` ## • `` -> `...198` ## • `` -> `...199` ## • `` -> `...200` ## • `` -> `...201` ## • `` -> `...202` ## • `` -> `...203` ## • `` -> `...204` ## • `` -> `...205` ## • `` -> `...206` ## • `` -> `...207` ## • `` -> `...208` ## • `` -> `...209` ## • `` -> `...210` ## • `` -> `...211` ## • `` -> `...212` ## • `` -> `...213` ## • `` -> `...214` ## • `` -> `...215` ## • `` -> `...216` ## • `` -> `...217` ## • `` -> `...218` ## • `` -> `...219` ## • `` -> `...220` ## • `` -> `...221` ## • `` -> `...222` ## • `` -> `...223` ## • `` -> `...224` ## • `` -> `...225` ## • `` -> `...226` ## • `` -> `...227` ## • `` -> `...228` ## • `` -> `...229` ## • `` -> `...230` ## • `` -> `...231` ## • `` -> `...232` ## • `` -> `...233` ## • `` -> `...234` ## • `` -> `...235` ## • `` -> `...236` ## • `` -> `...237` ## • `` -> `...238` ## • `` -> `...239` ## • `` -> `...240` ## • `` -> `...241` ## • `` -> `...242` ## • `` -> `...243` ## • `` -> `...244` ## • `` -> `...245` ## • `` -> `...246` ## • `` -> `...247` ## • `` -> `...248` ## • `` -> `...249` ## • `` -> `...250` ## • `` -> `...251` ## • `` -> `...252` ## • `` -> `...253` ## • `` -> `...254` ## • `` -> `...255` ## • `` -> `...256` ## • `` -> `...257` ## • `` -> `...258` ## • `` -> `...259` ## • `` -> `...260` ## • `` -> `...261` ## • `` -> `...262` ## • `` -> `...263` ## • `` -> `...264` ## • `` -> `...265` ## • `` -> `...266` ## • `` -> `...267` ## • `` -> `...268` ## • `` -> `...269` ## • `` -> `...270` ## • `` -> `...271` ## • `` -> `...272` ## • `` -> `...273` ## • `` -> `...274` ## • `` -> `...275` ## • `` -> `...276` ## • `` -> `...277` ## • `` -> `...278` ## • `` -> `...279` ## • `` -> `...280` ## • `` -> `...281` ## • `` -> `...282` ## • `` -> `...283` ## • `` -> `...284` ## • `` -> `...285` ## • `` -> `...286` ## • `` -> `...287` ## • `` -> `...288` ## • `` -> `...289` ## • `` -> `...290` ## • `` -> `...291` ## • `` -> `...292` ## • `` -> `...293` ## • `` -> `...294` ## • `` -> `...295` ## • `` -> `...296` ## • `` -> `...297` ## • `` -> `...298` ## • `` -> `...299` ## • `` -> `...300` ## • `` -> `...301` ## • `` -> `...302` ## • `` -> `...303` ## • `` -> `...304` ## • `` -> `...305` ## • `` -> `...306` ## • `` -> `...307` ## • `` -> `...308` ## • `` -> `...309` ## • `` -> `...310` ## • `` -> `...311` ## • `` -> `...312` ## • `` -> `...313` ## • `` -> `...314` ## • `` -> `...315` ## • `` -> `...316` ## • `` -> `...317` ## • `` -> `...318` ## • `` -> `...319` ## • `` -> `...320` ## • `` -> `...321` ## • `` -> `...322` ## • `` -> `...323` ## • `` -> `...324` ## • `` -> `...325` ## • `` -> `...326` ## • `` -> `...327` ## • `` -> `...328` ## • `` -> `...329` ## • `` -> `...330` ## • `` -> `...331` ## • `` -> `...332` ## • `` -> `...333` ## • `` -> `...334` ## • `` -> `...335` ## • `` -> `...336` ## • `` -> `...337` ## • `` -> `...338` ## • `` -> `...339` ## • `` -> `...340` ## • `` -> `...341` ## • `` -> `...342` ## • `` -> `...343` ## • `` -> `...344` ## • `` -> `...345` ## • `` -> `...346` ## • `` -> `...347` ## • `` -> `...348` ## • `` -> `...349` ## • `` -> `...350` ## • `` -> `...351` ## • `` -> `...352` ## • `` -> `...353` ## • `` -> `...354` ## • `` -> `...355` ## • `` -> `...356` ## • `` -> `...357` ## • `` -> `...358` ## • `` -> `...359` ## • `` -> `...360` ## • `` -> `...361` ## • `` -> `...362` ## • `` -> `...363` ## • `` -> `...364` ## • `` -> `...365` ## • `` -> `...366` ## • `` -> `...367` ## • `` -> `...368` ## • `` -> `...369` ## • `` -> `...370` ## • `` -> `...371` ## • `` -> `...372` ## • `` -> `...373` ## • `` -> `...374` ## • `` -> `...375` ## • `` -> `...376` ## • `` -> `...377` ## • `` -> `...378` ## • `` -> `...379` ## • `` -> `...380` ## • `` -> `...381` ## • `` -> `...382` ## • `` -> `...383` ## • `` -> `...384` ## • `` -> `...385` ## • `` -> `...386` ## • `` -> `...387` ## • `` -> `...388` ## • `` -> `...389` ## • `` -> `...390` ## • `` -> `...391` ## • `` -> `...392` ## • `` -> `...393` ## • `` -> `...394` ## • `` -> `...395` ## • `` -> `...396` ## • `` -> `...397` ## • `` -> `...398` ## • `` -> `...399` ## • `` -> `...400` ## • `` -> `...401` ## • `` -> `...402` ## • `` -> `...403` ## • `` -> `...404` ## • `` -> `...405` ## • `` -> `...406` ## • `` -> `...407` ## • `` -> `...408` ## • `` -> `...409` ## • `` -> `...410` ## • `` -> `...411` ## • `` -> `...412` ## • `` -> `...413` ## • `` -> `...414` ## • `` -> `...415` ## • `` -> `...416` ## • `` -> `...417` ## • `` -> `...418` ## • `` -> `...419` ## • `` -> `...420` ## • `` -> `...421` ## • `` -> `...422` ## • `` -> `...423` ## • `` -> `...424` ## • `` -> `...425` ## • `` -> `...426` ## • `` -> `...427` ## • `` -> `...428` ## • `` -> `...429` ## • `` -> `...430` ## • `` -> `...431` ## • `` -> `...432` ## • `` -> `...433` ## • `` -> `...434` ## • `` -> `...435` ## • `` -> `...436` ## • `` -> `...437` ## • `` -> `...438` ## • `` -> `...439` ## • `` -> `...440` ## • `` -> `...441` ## • `` -> `...442` ## • `` -> `...443` ## • `` -> `...444` ## • `` -> `...445` ## • `` -> `...446` ## • `` -> `...447` ## • `` -> `...448` ## • `` -> `...449` ## • `` -> `...450` ## • `` -> `...451` ## • `` -> `...452` ## • `` -> `...453` ## • `` -> `...454` ## • `` -> `...455` ## • `` -> `...456` ## • `` -> `...457` ## • `` -> `...458` ## • `` -> `...459` ## • `` -> `...460` ## • `` -> `...461` ## • `` -> `...462` ## • `` -> `...463` ## • `` -> `...464` ## • `` -> `...465` ## • `` -> `...466` ## • `` -> `...467` ## • `` -> `...468` ## • `` -> `...469` ## • `` -> `...470` ## • `` -> `...471` ## • `` -> `...472` ## • `` -> `...473` ## • `` -> `...474` ## • `` -> `...475` ## • `` -> `...476` ## • `` -> `...477` ## • `` -> `...478` ## • `` -> `...479` ## • `` -> `...480` ## • `` -> `...481` ## • `` -> `...482` ## • `` -> `...483` ## • `` -> `...484` ## • `` -> `...485` ## • `` -> `...486` ## • `` -> `...487` ## • `` -> `...488` ## • `` -> `...489` ## • `` -> `...490` ## • `` -> `...491` ## • `` -> `...492` ## • `` -> `...493` ## • `` -> `...494` ## • `` -> `...495` ## • `` -> `...496` ## • `` -> `...497` ## • `` -> `...498` ## • `` -> `...499` ## • `` -> `...500` ## • `` -> `...501` ## • `` -> `...502` ## • `` -> `...503` ## • `` -> `...504` ## • `` -> `...505` ## • `` -> `...506` ## • `` -> `...507` ## • `` -> `...508` ## • `` -> `...509` ## • `` -> `...510` ## • `` -> `...511` ## • `` -> `...512` ## • `` -> `...513` ## • `` -> `...514` ## • `` -> `...515` ## • `` -> `...516` ## • `` -> `...517` ## • `` -> `...518` ## • `` -> `...519` ## • `` -> `...520` ## • `` -> `...521` ## • `` -> `...522` ## • `` -> `...523` ## • `` -> `...524` ## • `` -> `...525` ## • `` -> `...526` ## • `` -> `...527` ## • `` -> `...528` ## • `` -> `...529` ## • `` -> `...530` ## • `` -> `...531` ## • `` -> `...532` ## • `` -> `...533` ## • `` -> `...534` ## • `` -> `...535` ## • `` -> `...536` ## • `` -> `...537` ## • `` -> `...538` ## • `` -> `...539` ## • `` -> `...540` ## • `` -> `...541` ## • `` -> `...542` ## • `` -> `...543` ## • `` -> `...544` ## • `` -> `...545` ## • `` -> `...546` ## • `` -> `...547` ## • `` -> `...548` ## • `` -> `...549` ## • `` -> `...550` ## • `` -> `...551` ## • `` -> `...552` ## • `` -> `...553` ## • `` -> `...554` ## • `` -> `...555` loaded_data$feature_metadata$MZ <-   as.numeric(loaded_data$feature_metadata$MZ) loaded_data$feature_metadata$RT <-   as.numeric(loaded_data$feature_metadata$RT) feature_metadata2 <-   loaded_data$feature_metadata[colnames(loaded_data$data), ] feature_metadata2$Intensity <- colMeans(loaded_data$data, na.rm = T) feature_metadata <- cbind(feature_metadata2, t(loaded_data$data)) ref_input <-   feature_metadata2[!is.na(feature_metadata2$MZ) &     !is.na(feature_metadata2$RT), ] # ids <- sapply(str_split(feature_metadata2$Compound_ID, \"_\"), \"[[\", 2) # feature_metadata3 <- cbind(feature_metadata2, #t(loaded_data)) # c(\"Compound_ID\", \"MZ\", \"RT\", \"Intensity\", \"Metabolite\")"},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"load-prism-clustered-data-as-main-output","dir":"Articles","previous_headings":"read data","what":"load PRISM clustered data as main output","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"","code":"PRISM <-   massSight::load_data(     input = \"data/41564_2018_306_MOESM_combined3_4_ESM.xlsx\",     type = \"all\",     sheet = 1,     id = \"Compound_ID\"   ) ## New names: ## • `` -> `...1` ## • `` -> `...2` ## • `` -> `...3` ## • `` -> `...4` ## • `` -> `...5` ## • `` -> `...6` ## • `` -> `...7` ## • `` -> `...8` ## • `` -> `...9` ## • `` -> `...10` ## • `` -> `...11` ## • `` -> `...12` ## • `` -> `...13` ## • `` -> `...14` ## • `` -> `...15` ## • `` -> `...16` ## • `` -> `...17` ## • `` -> `...18` ## • `` -> `...19` ## • `` -> `...20` ## • `` -> `...21` ## • `` -> `...22` ## • `` -> `...23` ## • `` -> `...24` ## • `` -> `...25` ## • `` -> `...26` ## • `` -> `...27` ## • `` -> `...28` ## • `` -> `...29` ## • `` -> `...30` ## • `` -> `...31` ## • `` -> `...32` ## • `` -> `...33` ## • `` -> `...34` ## • `` -> `...35` ## • `` -> `...36` ## • `` -> `...37` ## • `` -> `...38` ## • `` -> `...39` ## • `` -> `...40` ## • `` -> `...41` ## • `` -> `...42` ## • `` -> `...43` ## • `` -> `...44` ## • `` -> `...45` ## • `` -> `...46` ## • `` -> `...47` ## • `` -> `...48` ## • `` -> `...49` ## • `` -> `...50` ## • `` -> `...51` ## • `` -> `...52` ## • `` -> `...53` ## • `` -> `...54` ## • `` -> `...55` ## • `` -> `...56` ## • `` -> `...57` ## • `` -> `...58` ## • `` -> `...59` ## • `` -> `...60` ## • `` -> `...61` ## • `` -> `...62` ## • `` -> `...63` ## • `` -> `...64` ## • `` -> `...65` ## • `` -> `...66` ## • `` -> `...67` ## • `` -> `...68` ## • `` -> `...69` ## • `` -> `...70` ## • `` -> `...71` ## • `` -> `...72` ## • `` -> `...73` ## • `` -> `...74` ## • `` -> `...75` ## • `` -> `...76` ## • `` -> `...77` ## • `` -> `...78` ## • `` -> `...79` ## • `` -> `...80` ## • `` -> `...81` ## • `` -> `...82` ## • `` -> `...83` ## • `` -> `...84` ## • `` -> `...85` ## • `` -> `...86` ## • `` -> `...87` ## • `` -> `...88` ## • `` -> `...89` ## • `` -> `...90` ## • `` -> `...91` ## • `` -> `...92` ## • `` -> `...93` ## • `` -> `...94` ## • `` -> `...95` ## • `` -> `...96` ## • `` -> `...97` ## • `` -> `...98` ## • `` -> `...99` ## • `` -> `...100` ## • `` -> `...101` ## • `` -> `...102` ## • `` -> `...103` ## • `` -> `...104` ## • `` -> `...105` ## • `` -> `...106` ## • `` -> `...107` ## • `` -> `...108` ## • `` -> `...109` ## • `` -> `...110` ## • `` -> `...111` ## • `` -> `...112` ## • `` -> `...113` ## • `` -> `...114` ## • `` -> `...115` ## • `` -> `...116` ## • `` -> `...117` ## • `` -> `...118` ## • `` -> `...119` ## • `` -> `...120` ## • `` -> `...121` ## • `` -> `...122` ## • `` -> `...123` ## • `` -> `...124` ## • `` -> `...125` ## • `` -> `...126` ## • `` -> `...127` ## • `` -> `...128` ## • `` -> `...129` ## • `` -> `...130` ## • `` -> `...131` ## • `` -> `...132` ## • `` -> `...133` ## • `` -> `...134` ## • `` -> `...135` ## • `` -> `...136` ## • `` -> `...137` ## • `` -> `...138` ## • `` -> `...139` ## • `` -> `...140` ## • `` -> `...141` ## • `` -> `...142` ## • `` -> `...143` ## • `` -> `...144` ## • `` -> `...145` ## • `` -> `...146` ## • `` -> `...147` ## • `` -> `...148` ## • `` -> `...149` ## • `` -> `...150` ## • `` -> `...151` ## • `` -> `...152` ## • `` -> `...153` ## • `` -> `...154` ## • `` -> `...155` ## • `` -> `...156` ## • `` -> `...157` ## • `` -> `...158` ## • `` -> `...159` ## • `` -> `...160` ## • `` -> `...161` ## • `` -> `...162` ## • `` -> `...163` ## • `` -> `...164` ## • `` -> `...165` ## • `` -> `...166` ## • `` -> `...167` ## • `` -> `...168` ## • `` -> `...169` ## • `` -> `...170` ## • `` -> `...171` ## • `` -> `...172` ## • `` -> `...173` ## • `` -> `...174` ## • `` -> `...175` ## • `` -> `...176` ## • `` -> `...177` ## • `` -> `...178` ## • `` -> `...179` ## • `` -> `...180` ## • `` -> `...181` ## • `` -> `...182` ## • `` -> `...183` ## • `` -> `...184` ## • `` -> `...185` ## • `` -> `...186` ## • `` -> `...187` ## • `` -> `...188` ## • `` -> `...189` ## • `` -> `...190` ## • `` -> `...191` ## • `` -> `...192` ## • `` -> `...193` ## • `` -> `...194` ## • `` -> `...195` ## • `` -> `...196` ## • `` -> `...197` ## • `` -> `...198` ## • `` -> `...199` ## • `` -> `...200` ## • `` -> `...201` ## • `` -> `...202` ## • `` -> `...203` ## • `` -> `...204` ## • `` -> `...205` ## • `` -> `...206` ## • `` -> `...207` ## • `` -> `...208` ## • `` -> `...209` ## • `` -> `...210` ## • `` -> `...211` ## • `` -> `...212` ## • `` -> `...213` ## • `` -> `...214` ## • `` -> `...215` ## • `` -> `...216` ## • `` -> `...217` ## • `` -> `...218` ## • `` -> `...219` ## • `` -> `...220` ## • `` -> `...221` ## • `` -> `...222` ## • `` -> `...223` ## • `` -> `...224` ## • `` -> `...225` ## • `` -> `...226` ## • `` -> `...227` ## • `` -> `...228` ## • `` -> `...229` PRISM$feature_metadata$MZ <-   as.numeric(PRISM$feature_metadata$MZ) PRISM$feature_metadata$RT <-   as.numeric(PRISM$feature_metadata$RT) feature_metadata2 <-   PRISM$feature_metadata[colnames(PRISM$data), ] feature_metadata2$Intensity <- colMeans(PRISM$data, na.rm = T) feature_metadata <- cbind(feature_metadata2, t(PRISM$data)) PRISM_input <-   feature_metadata2[!is.na(feature_metadata2$MZ) &     !is.na(feature_metadata2$RT), ] PRISM_Methods <- sapply(str_split(PRISM_input$Compound_ID, \"_\"), \"[[\", 1) PRISM_input$Method <- PRISM_Methods"},{"path":[]},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"create-an-object-for-ihmp-data-as-reference-for-alignment-and-combining","dir":"Articles","previous_headings":"Approach 1: iHMP vs. PRISM method by method","what":"Create an object for iHMP data as reference for alignment and combining","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"plots can saved locally well.","code":"aligned_df <- vector(mode = \"list\", length = 4) profiling_methods <- c(\"HILIC-neg\", \"HILIC-pos\", \"C18-neg\", \"C8-pos\") names(aligned_df) <- profiling_methods ref <- query <- final_smooth <- aligned_df for (profiling_method in profiling_methods) {   ref[[profiling_method]] <-     create_ms_obj(       df = ref_input[ref_input$Method == profiling_method, ],       name = \"iHMP\",       id_name = \"Compound_ID\",       rt_name = \"RT\",       mz_name = \"MZ\",       int_name = \"Intensity\"     )    query[[profiling_method]] <-     create_ms_obj(       df = PRISM_input[PRISM_input$Method == profiling_method, ],       name = \"PRISM\",       id_name = \"Compound_ID\",       rt_name = \"RT\",       mz_name = \"MZ\",       int_name = \"Intensity\"     )    # create and save distribution of MZ and RT of features   ms1_distr <- massSight::distribution_plot(query[[profiling_method]])   ms2_distr <- massSight::distribution_plot(ref[[profiling_method]])   print(ms1_distr)   print(ms2_distr) } ggsave(     filename = paste0(\"analysis/iHMP_PRISM/PRISM_\", profiling_method, \"_query_distr_plot.png\"),     plot = ms1_distr,     width = 5,     height = 5,     units = \"in\",     dpi = 300,     create.dir = TRUE   )   ggsave(     filename = paste0(\"analysis/iHMP_PRISM/iHMP_\", profiling_method, \"_ref_distr_plot.png\"),     plot = ms2_distr,     width = 5,     height = 5,     units = \"in\",     dpi = 300,     create.dir = TRUE   ) } for (profiling_method in profiling_methods) {   print(profiling_method)   aligned_df[[profiling_method]] <-     auto_combine(ref[[profiling_method]], query[[profiling_method]], smooth_method = \"gam\", log = NULL) }"},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"view-and-write","dir":"Articles","previous_headings":"","what":"View and write","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"","code":"for (profiling_method in profiling_methods) {   write.table(aligned_df[[profiling_method]]@all_matched, file = paste0(\"analysis/iHMP_PRISM/iHMP_PRISM_\", profiling_method, \"_excel.tsv\"), quote = FALSE, sep = \"\\t\", row.names = FALSE) }"},{"path":"https://omicseye.github.io/massSight/articles/massSight_iHMP_PRISM.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"massSight combine iHMP and PRISM metabolites (IBD studies)","text":"","code":"for (profiling_method in profiling_methods) {   final_smooth[[profiling_method]] <- final_plots(aligned_df[[profiling_method]])   print(final_smooth[[profiling_method]])   ggsave(     filename = paste0(\"analysis/iHMP_PRISM/iHMP_vs_all_PRISM_excel_\", profiling_method, \"_massSight_plots.png\"),     plot = final_smooth[[profiling_method]],     width = 5,     height = 5,     units = \"in\",     dpi = 300,     create.dir = TRUE   ) } for (profiling_method in profiling_methods) {   write.table(aligned_df[[profiling_method]]@all_matched,     file = paste0(\"analysis/iHMP_PRISM/iHMP_PRISM_\", profiling_method, \"_excel.tsv\"),     quote = FALSE, sep = \"\\t\", row.names = FALSE   ) }"},{"path":"https://omicseye.github.io/massSight/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chiraag Gohel. Author, maintainer. Bahar Sayoldin. Author. Ali Rahnavard. Author.","code":""},{"path":"https://omicseye.github.io/massSight/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gohel C, Sayoldin B, Rahnavard (2025). massSight: Batch Alignment Scaling LC-MS Data. R package version 0.3.0.9000, https://omicseye.github.io/massSight/, https://github.com/omicsEye/massSight.","code":"@Manual{,   title = {massSight: Batch Alignment and Scaling for LC-MS Data},   author = {Chiraag Gohel and Bahar Sayoldin and Ali Rahnavard},   year = {2025},   note = {R package version 0.3.0.9000,     https://omicseye.github.io/massSight/},   url = {https://github.com/omicsEye/massSight}, }"},{"path":"https://omicseye.github.io/massSight/index.html","id":"masssight","dir":"","previous_headings":"","what":"Batch Alignment and Scaling for LC-MS Data","title":"Batch Alignment and Scaling for LC-MS Data","text":"Installation Input Data Format 1. Create massSight Objects 2. Align Datasets 3. Access Results 4. Visualize Results Key Parameters Output Format Examples Documentation   massSight R package combining scaling LC-MS metabolomics data. enables alignment integration metabolomics data multiple experiments correcting systematic differences retention time mass--charge ratios. Citation: use massSight, please cite manuscript: Chiraag Gohel Ali Rahnavard. (2023). massSight: Metabolomics meta-analysis multi-study data scaling, integration, harmonization. https://github.com/omicsEye/massSight","code":""},{"path":"https://omicseye.github.io/massSight/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Batch Alignment and Scaling for LC-MS Data","text":"can load library using:","code":"pak::pak(\"omicsEye/massSight\") library(massSight)"},{"path":"https://omicseye.github.io/massSight/index.html","id":"input-data-format","dir":"","previous_headings":"","what":"Input Data Format","title":"Batch Alignment and Scaling for LC-MS Data","text":"massSight works LC-MS data frames must contain following required columns: Compound ID - Unique identifier feature Retention Time (RT) - retention time minutes Mass Charge Ratio (MZ) - mass--charge ratio Intensity (Optional) - Average intensity across samples Metabolite Name (Optional) - Known metabolite annotations Example input data format:","code":""},{"path":[]},{"path":"https://omicseye.github.io/massSight/index.html","id":"id_1-create-masssight-objects","dir":"","previous_headings":"Usage","what":"1. Create massSight Objects","title":"Batch Alignment and Scaling for LC-MS Data","text":"First, convert LC-MS data frames MSObjects using create_ms_obj:","code":"ms1 <- create_ms_obj(     df = hp1,     name = \"hp1\",     id_name = \"Compound_ID\",  # Column name for compound IDs     rt_name = \"RT\",           # Column name for retention time     mz_name = \"MZ\",           # Column name for mass-to-charge ratio     int_name = \"Intensity\",   # Column name for intensity (optional)     metab_name = \"Metabolite\" # Column name for metabolite names (optional) )  ms2 <- create_ms_obj(     df = hp2,     name = \"hp2\",     id_name = \"Compound_ID\",     rt_name = \"RT\",      mz_name = \"MZ\",     int_name = \"Intensity\",     metab_name = \"Metabolite\" )"},{"path":"https://omicseye.github.io/massSight/index.html","id":"id_2-align-datasets","dir":"","previous_headings":"Usage","what":"2. Align Datasets","title":"Batch Alignment and Scaling for LC-MS Data","text":"Use mass_combine() align datasets. function offers two main approaches:","code":""},{"path":"https://omicseye.github.io/massSight/index.html","id":"a-automatic-parameter-optimization-recommended","dir":"","previous_headings":"Usage > 2. Align Datasets","what":"A. Automatic Parameter Optimization (Recommended)","title":"Batch Alignment and Scaling for LC-MS Data","text":"","code":"aligned <- mass_combine(     ms1,                    # Reference dataset     ms2,                    # Dataset to align     optimize = TRUE,        # Enable automatic parameter optimization     smooth_method = \"gam\",  # Method for drift correction     n_iter = 50            # Number of optimization iterations ) #> Optimizing parameters using Bayesian optimization... #> Initializing optimization... #>  #> Target score achieved! Stopping optimization. #> Optimization complete. Final score: 1.000 #>  #> Optimal parameters: #>   RT delta: 0.962 #>   MZ delta: 15.508 #>   RT isolation threshold: 0.077 #>   MZ isolation threshold: 4.572 #>   Alpha rank: 0.076 #>   Alpha RT: -0.422 #>   Alpha MZ: -1.504"},{"path":"https://omicseye.github.io/massSight/index.html","id":"b-manual-parameter-setting","dir":"","previous_headings":"Usage > 2. Align Datasets","what":"B. Manual Parameter Setting","title":"Batch Alignment and Scaling for LC-MS Data","text":"","code":"aligned <- mass_combine(     ms1,     ms2,     optimize = FALSE,     rt_delta = 0.5,        # RT window (±minutes)     mz_delta = 15,         # MZ window (±ppm)     minimum_intensity = 10, # Minimum intensity threshold     smooth_method = \"gam\"  # Drift correction method ) #> GAM smoothing for RT drift #> Starting mass error correction #> GAM smoothing for mass error #> Creating potential final matches #> Calculating match scores"},{"path":"https://omicseye.github.io/massSight/index.html","id":"id_3-access-results","dir":"","previous_headings":"Usage","what":"3. Access Results","title":"Batch Alignment and Scaling for LC-MS Data","text":"alignment results can accessed several ways:","code":"# Get all matched features matches <- all_matched(aligned) # Get unique 1:1 matches unique_matches <- get_unique_matches(aligned)"},{"path":"https://omicseye.github.io/massSight/index.html","id":"id_4-visualize-results","dir":"","previous_headings":"Usage","what":"4. Visualize Results","title":"Batch Alignment and Scaling for LC-MS Data","text":"Generate diagnostic plots assess alignment quality:","code":"final_plots(aligned)"},{"path":"https://omicseye.github.io/massSight/index.html","id":"key-parameters","dir":"","previous_headings":"","what":"Key Parameters","title":"Batch Alignment and Scaling for LC-MS Data","text":"optimize: TRUE, uses Bayesian optimization find optimal alignment parameters rt_delta: Retention time window matching (minutes) mz_delta: Mass--charge ratio window matching (ppm) smooth_method: Method drift correction (“gam”, “bayesian_gam”, “gp”, “lm”) match_method: Strategy initial matching (“unsupervised” “supervised”) minimum_intensity: Minimum intensity threshold features","code":""},{"path":"https://omicseye.github.io/massSight/index.html","id":"output-format","dir":"","previous_headings":"","what":"Output Format","title":"Batch Alignment and Scaling for LC-MS Data","text":"aligned results contain: Matched Features: corresponding features datasets Drift Corrections: Systematic differences RT MZ Quality Metrics: Alignment evaluation scores Diagnostic Plots: Visualization RT MZ drift","code":""},{"path":"https://omicseye.github.io/massSight/index.html","id":"examples-and-documentation","dir":"","previous_headings":"","what":"Examples and Documentation","title":"Batch Alignment and Scaling for LC-MS Data","text":"detailed examples extensive documentation, visit documentation site.","code":""},{"path":"https://omicseye.github.io/massSight/reference/MSObject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to represent mass spectroscopy data. — MSObject-class","title":"Class to represent mass spectroscopy data. — MSObject-class","text":"Class represent mass spectroscopy data.","code":""},{"path":"https://omicseye.github.io/massSight/reference/MSObject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class to represent mass spectroscopy data. — MSObject-class","text":"name character indicating name experiment. raw_df data frame containing raw data. isolated data frame containing isolated data. scaled_df data frame containing scaled data. consolidated logical indicating whether data consolidated. metadata data frame containing metadata.","code":""},{"path":"https://omicseye.github.io/massSight/reference/MergedMSObject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to represent merged mass spectroscopy data. — MergedMSObject-class","title":"Class to represent merged mass spectroscopy data. — MergedMSObject-class","text":"Class represent merged mass spectroscopy data.","code":""},{"path":"https://omicseye.github.io/massSight/reference/MergedMSObject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class to represent merged mass spectroscopy data. — MergedMSObject-class","text":"ms1 character indicating name experiment. ms2 data frame containing raw data. all_matched data frame containing scaled data. iso_matched data frame containing scaled data. metadata logical indicating whether data consolidated. pre_iso_matched data frame containing matched pairs initial isolation scaled_values vector scaled values adjusted_df data frame containing drift corrected metabolites cutoffs vector cutoffs aligned dataframe containing final metabolite mathces smooth_method list smoothing values","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Combine — auto_combine","title":"Auto Combine — auto_combine","text":"Combines two massSight objects, resulting single MergedMSObject.","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Combine — auto_combine","text":"","code":"auto_combine(   ms1,   ms2,   rt_lower = -0.5,   rt_upper = 0.5,   mz_lower = -15,   mz_upper = 15,   minimum_intensity = 10,   iso_method = \"manual\",   eps = 0.1,   rt_iso_threshold = 0.1,   mz_iso_threshold = 5,   match_method = \"unsupervised\",   smooth_method = \"gam\",   weights = c(1, 1, 1),   log = NULL,   output = NULL )"},{"path":"https://omicseye.github.io/massSight/reference/auto_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Combine — auto_combine","text":"ms1 massSight object representing results preprocessed LC-MS experiment. ms2 massSight object representing results second preprocessed LC-MS experiment. rt_lower numeric indicating lower bound RT range considered aligning two metabolites. rt_upper numeric indicating upper bound RT range considered aligning two metabolites. mz_lower numeric indicating lower bound m/z range considered aligning two metabolites. mz_upper numeric indicating upper bound m/z range considered aligning two metabolites. minimum_intensity numeric indicating minimum intensity considered alignment. iso_method isolation method used modeling drift. Can either \"manual\" \"dbscan\". eps Epsilon value dbscan algorithm. used iso_method = \"dbscan\" rt_iso_threshold numeric indicating isolation parameter RT. mz_iso_threshold numeric indicating isolation parameter m/z. match_method character indicating initial matching method used detect inter-batch variability. Options \"unsupervised\" \"supervised\". smooth_method character indicating smoothing method used. Options \"lowess\", \"spline\", \"gaussian\". weights numeric vector indicating weights used alignment. log character indicating name log file. output character indicating directory save output. NULL, output saved current working directory.","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Combine — auto_combine","text":"MergedMSObject containing combined data.","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Scale — auto_scale","title":"Auto Scale — auto_scale","text":"function automatically scale data based normalization method choose. also calculate CVs sample metabolite.","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Scale — auto_scale","text":"","code":"auto_scale(   data,   sample_information,   is_to_use = \"\",   pref_to_use = \"PREFA\",   prefs_to_remove = \"\",   normalization = c(\"IS\", \"NN\"),   pool_missing_p = 100,   fill_method = \"none\",   smooth_method = \"lowess\" )"},{"path":"https://omicseye.github.io/massSight/reference/auto_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Scale — auto_scale","text":"data data frame data normalized. output read_data function. sample_information data frame sample information. output read_sample_information function. is_to_use vector internal standards use normalization. want use internal standards, leave blank. pref_to_use string preferred reference use normalization. want use preferred reference, leave blank. prefs_to_remove vector preferred references remove data. want remove preferred references, leave blank. normalization string normalization method use. can \"\", \"NN\", \"SMOOTH\". pool_missing_p numeric value indicating percentage missing pools allowed skipping normalization (0-100). fill_method string indicating fill missing values. can \"half-min\" \"none\". smooth_method string indicating smoothing method use. can \"lowess\", \"line\", \"spline\", \"gaussian\".","code":""},{"path":"https://omicseye.github.io/massSight/reference/auto_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Scale — auto_scale","text":"data frame normalized data.","code":""},{"path":"https://omicseye.github.io/massSight/reference/cd2csv.html","id":null,"dir":"Reference","previous_headings":"","what":"CD-To-Csv — cd2csv","title":"CD-To-Csv — cd2csv","text":"Converts output Compound Discoverer csv format suitable massSight","code":""},{"path":"https://omicseye.github.io/massSight/reference/cd2csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CD-To-Csv — cd2csv","text":"","code":"cd2csv(path, gen_id = TRUE, output_file = NULL)"},{"path":"https://omicseye.github.io/massSight/reference/cd2csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CD-To-Csv — cd2csv","text":"path path Compound Discoverer Excel (.xlsx) file gen_id TRUE, function generate unique id compound based retention time mass charge ratio. output_file name file save formatted data. NULL (default), csv file written.","code":""},{"path":"https://omicseye.github.io/massSight/reference/cd2csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CD-To-Csv — cd2csv","text":"dataframe can used massSight's mass_combine() auto_scale()","code":""},{"path":"https://omicseye.github.io/massSight/reference/cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster — cluster","title":"Cluster — cluster","text":"function cluster data based clustering method choose.","code":""},{"path":"https://omicseye.github.io/massSight/reference/cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster — cluster","text":"","code":"cluster()"},{"path":"https://omicseye.github.io/massSight/reference/consolidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate — consolidate","title":"Consolidate — consolidate","text":"Consolidate adducts/isomers similar features one observation","code":""},{"path":"https://omicseye.github.io/massSight/reference/consolidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate — consolidate","text":"","code":"consolidate(   ms_obj,   use_rt = TRUE,   use_mz = TRUE,   rt_threshold = NULL,   mz_threshold = NULL )"},{"path":"https://omicseye.github.io/massSight/reference/consolidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate — consolidate","text":"ms_obj massSight object use_rt boolean retention time used identifying metabolites consolidated use_mz boolean mass charge ratio used identifying metabolites consolidated rt_threshold user defined retention time threshold defining adducts/isomers mz_threshold user defined mass charge ratio threshold defining adducts/isomers","code":""},{"path":"https://omicseye.github.io/massSight/reference/consolidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate — consolidate","text":"massSight object consolidated metabolites","code":""},{"path":"https://omicseye.github.io/massSight/reference/consolidate_isotopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Group isotopes with their parent compounds and prepare for matching — consolidate_isotopes","title":"Group isotopes with their parent compounds and prepare for matching — consolidate_isotopes","text":"Group isotopes parent compounds prepare matching","code":""},{"path":"https://omicseye.github.io/massSight/reference/consolidate_isotopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group isotopes with their parent compounds and prepare for matching — consolidate_isotopes","text":"","code":"consolidate_isotopes(ms_obj)"},{"path":"https://omicseye.github.io/massSight/reference/consolidate_isotopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group isotopes with their parent compounds and prepare for matching — consolidate_isotopes","text":"ms_obj MSObject isotope labels","code":""},{"path":"https://omicseye.github.io/massSight/reference/consolidate_isotopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group isotopes with their parent compounds and prepare for matching — consolidate_isotopes","text":"MSObject consolidated isotope groups","code":""},{"path":"https://omicseye.github.io/massSight/reference/create_ms_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MS Object — create_ms_obj","title":"Create MS Object — create_ms_obj","text":"Create MSObject data frame.","code":""},{"path":"https://omicseye.github.io/massSight/reference/create_ms_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MS Object — create_ms_obj","text":"","code":"create_ms_obj(   df,   name,   id_name = \"Compound_ID\",   rt_name = \"RT\",   mz_name = \"MZ\",   int_name = \"Intensity\",   metab_name = \"Metabolite\" )"},{"path":"https://omicseye.github.io/massSight/reference/create_ms_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MS Object — create_ms_obj","text":"df data frame containing raw data. name character indicating name experiment. id_name character indicating name column containing compound IDs. rt_name character indicating name column containing retention times. mz_name character indicating name column containing m/z values. int_name character indicating name column containing intensities metab_name optional character indicating name column containing metabolite annotations","code":""},{"path":"https://omicseye.github.io/massSight/reference/create_ms_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create MS Object — create_ms_obj","text":"MSObject.","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_adducts.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Adducts in Mass Spectrometry Data — detect_adducts","title":"Detect Adducts in Mass Spectrometry Data — detect_adducts","text":"function identifies potential adduct pairs mass spectrometry data based mass differences retention times.","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_adducts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Adducts in Mass Spectrometry Data — detect_adducts","text":"","code":"detect_adducts(   data,   ppm_tolerance = 5,   rt_tolerance = 0.1,   ion_mode = \"pos\",   adducts = NULL )"},{"path":"https://omicseye.github.io/massSight/reference/detect_adducts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Adducts in Mass Spectrometry Data — detect_adducts","text":"data data frame containing least columns RT (retention time minutes) MZ (mass--charge ratio). ppm_tolerance Mass accuracy tolerance parts per million (ppm) matching mass differences. Default 5 ppm. rt_tolerance Retention time tolerance minutes considering peaks potential adducts. Default 0.1 minutes. ion_mode Ionization mode, either \"pos\" positive \"neg\" negative. Default \"pos\". adducts Optional data frame adduct definitions. provided, default list common adducts used based ion_mode.","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_adducts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Adducts in Mass Spectrometry Data — detect_adducts","text":"data frame potential adduct pairs details matches.","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_adducts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Adducts in Mass Spectrometry Data — detect_adducts","text":"","code":"# Sample data data <- data.frame(   RT = c(1.0, 1.0, 1.0, 1.0),   MZ = c(100.0000, 101.0073, 122.9892, 138.9632) ) # Detect adducts in positive mode results <- detect_adducts(data, ion_mode = \"pos\") print(results) #>   mz1 rt1      mz2 rt2 observed_diff  adduct theoretical_diff ppm_error #> 1 100   1 122.9892   1       22.9892 [M+Na]+         22.98922 0.7829757 #> 2 100   1 138.9632   1       38.9632  [M+K]+         38.96316 1.0779414"},{"path":"https://omicseye.github.io/massSight/reference/detect_isotopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and label isotopes in an MSObject — detect_isotopes","title":"Detect and label isotopes in an MSObject — detect_isotopes","text":"Detect label isotopes MSObject","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_isotopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and label isotopes in an MSObject — detect_isotopes","text":"","code":"detect_isotopes(ms_obj, ppm_tolerance = 5, rt_tolerance = 0.1)"},{"path":"https://omicseye.github.io/massSight/reference/detect_isotopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and label isotopes in an MSObject — detect_isotopes","text":"ms_obj MSObject containing mass spectrometry data ppm_tolerance Mass tolerance PPM matching isotopes rt_tolerance RT window look isotopes","code":""},{"path":"https://omicseye.github.io/massSight/reference/detect_isotopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and label isotopes in an MSObject — detect_isotopes","text":"MSObject isotopic labels added","code":""},{"path":"https://omicseye.github.io/massSight/reference/distribution_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Plot — distribution_plot","title":"Distribution Plot — distribution_plot","text":"Plot distributions retention times mass charge ratios individual MS experiments","code":""},{"path":"https://omicseye.github.io/massSight/reference/distribution_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Plot — distribution_plot","text":"","code":"distribution_plot(ms_obj, subset = \"all\")"},{"path":"https://omicseye.github.io/massSight/reference/distribution_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Plot — distribution_plot","text":"ms_obj Either MSObject, MergedMSObject subset Whether plot metabolites isolated metabolites. Can either \"\" \"isolated\"","code":""},{"path":"https://omicseye.github.io/massSight/reference/distribution_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Plot — distribution_plot","text":"scatter plot retention times vs mass charge ratios marginal histograms","code":""},{"path":"https://omicseye.github.io/massSight/reference/evaluate_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate matching quality using known metabolite pairs — evaluate_matches","title":"Evaluate matching quality using known metabolite pairs — evaluate_matches","text":"Evaluate matching quality using known metabolite pairs","code":""},{"path":"https://omicseye.github.io/massSight/reference/evaluate_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate matching quality using known metabolite pairs — evaluate_matches","text":"","code":"evaluate_matches(result)"},{"path":"https://omicseye.github.io/massSight/reference/evaluate_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate matching quality using known metabolite pairs — evaluate_matches","text":"result Result mass_combine","code":""},{"path":"https://omicseye.github.io/massSight/reference/evaluate_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate matching quality using known metabolite pairs — evaluate_matches","text":"Numeric score 0 1","code":""},{"path":"https://omicseye.github.io/massSight/reference/filter_intensities.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Intensities — filter_intensities","title":"Filter Intensities — filter_intensities","text":"Filter Intensities","code":""},{"path":"https://omicseye.github.io/massSight/reference/filter_intensities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Intensities — filter_intensities","text":"","code":"filter_intensities(data, prevalence = 0.5)"},{"path":"https://omicseye.github.io/massSight/reference/filter_intensities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Intensities — filter_intensities","text":"data Dataframe containing results LC-MS experiment. prevalence Percent samples required keep metabolite.","code":""},{"path":"https://omicseye.github.io/massSight/reference/filter_intensities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Intensities — filter_intensities","text":"logical vector indicating rows original dataset retained","code":""},{"path":"https://omicseye.github.io/massSight/reference/final_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Create publication-ready visualization of mass spectrometry alignment results — final_plots","title":"Create publication-ready visualization of mass spectrometry alignment results — final_plots","text":"Create publication-ready visualization mass spectrometry alignment results","code":""},{"path":"https://omicseye.github.io/massSight/reference/final_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create publication-ready visualization of mass spectrometry alignment results — final_plots","text":"","code":"final_plots(   merged_ms_obj,   rt_lim = c(-0.5, 0.5),   mz_lim = c(-15, 15),   point_params = list(alpha = 0.25, size = 1.5, stroke = 0.05),   smooth_color = \"#AA9868\",   point_color = \"#033C5A\",   label_size = 8 )"},{"path":"https://omicseye.github.io/massSight/reference/final_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create publication-ready visualization of mass spectrometry alignment results — final_plots","text":"merged_ms_obj Merged MS Object mass_combine rt_lim RT bounds plotting, default c(-.5, .5) mz_lim MZ bounds plotting, default c(-15, 15) point_params List visual parameters points (alpha, size, etc.) smooth_color Color smoothing lines, default \"#AA9868\" point_color Color points, default \"#033C5A\" label_size Text size annotations, default 8","code":""},{"path":"https://omicseye.github.io/massSight/reference/final_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create publication-ready visualization of mass spectrometry alignment results — final_plots","text":"cowplot grid alignment visualization plots","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_known_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pairs of known metabolites between datasets — get_known_pairs","title":"Get pairs of known metabolites between datasets — get_known_pairs","text":"Get pairs known metabolites datasets","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_known_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pairs of known metabolites between datasets — get_known_pairs","text":"","code":"get_known_pairs(merged_ms)"},{"path":"https://omicseye.github.io/massSight/reference/get_known_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pairs of known metabolites between datasets — get_known_pairs","text":"ms1 First MSObject ms2 Second MSObject","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_known_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pairs of known metabolites between datasets — get_known_pairs","text":"Data frame matching compound IDs known metabolites","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_unique_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique 1-1 matches from mass_combine output — get_unique_matches","title":"Get unique 1-1 matches from mass_combine output — get_unique_matches","text":"Get unique 1-1 matches mass_combine output","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_unique_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique 1-1 matches from mass_combine output — get_unique_matches","text":"","code":"get_unique_matches(ms_object, pref = FALSE)"},{"path":"https://omicseye.github.io/massSight/reference/get_unique_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique 1-1 matches from mass_combine output — get_unique_matches","text":"ms_object MergedMSObject containing match results pref Logical: whether ensure every metabolite dataset 1 gets match (TRUE) optimize overall match quality (FALSE). Default FALSE.","code":""},{"path":"https://omicseye.github.io/massSight/reference/get_unique_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique 1-1 matches from mass_combine output — get_unique_matches","text":"Data frame containing unique 1-1 matches, feature appears ","code":""},{"path":"https://omicseye.github.io/massSight/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data — load_data","title":"Load Data — load_data","text":"function load LC-MS data file.","code":""},{"path":"https://omicseye.github.io/massSight/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data — load_data","text":"","code":"load_data(input, type = \"known\", sheet = 1, id = \"Metabolite\")"},{"path":"https://omicseye.github.io/massSight/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data — load_data","text":"input string file path data frame data loaded. type string indicating type data loaded. can \"known\" \"unknown\". sheet string integer indicating sheet number excel file loaded. id string indicating column name compound ID.","code":""},{"path":"https://omicseye.github.io/massSight/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data — load_data","text":"list sample metadata, feature metadata, data matrix.","code":""},{"path":"https://omicseye.github.io/massSight/reference/load_ihmp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load iHMP Data — load_ihmp_data","title":"Load iHMP Data — load_ihmp_data","text":"Load iHMP Data","code":""},{"path":"https://omicseye.github.io/massSight/reference/load_ihmp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load iHMP Data — load_ihmp_data","text":"","code":"load_ihmp_data(path = \"data/\")"},{"path":"https://omicseye.github.io/massSight/reference/massSight-package.html","id":null,"dir":"Reference","previous_headings":"","what":"massSight: Batch Alignment and Scaling for LC-MS Data — massSight-package","title":"massSight: Batch Alignment and Scaling for LC-MS Data — massSight-package","text":"`R` package alignment, scaling, downstream analysis LC-MS metabolomics data.","code":""},{"path":[]},{"path":"https://omicseye.github.io/massSight/reference/massSight-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"massSight: Batch Alignment and Scaling for LC-MS Data — massSight-package","text":"Maintainer: Chiraag Gohel chiraaggohel@gwu.edu (ORCID) Authors: Bahar Sayoldin sayoldin@gwu.edu (ORCID) Ali Rahnavard rahnavard@gwu.edu (ORCID)","code":""},{"path":"https://omicseye.github.io/massSight/reference/mass_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass Combine — mass_combine","title":"Mass Combine — mass_combine","text":"Combines two massSight objects aligning features correcting systematic differences retention time mass--charge ratios.","code":""},{"path":"https://omicseye.github.io/massSight/reference/mass_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass Combine — mass_combine","text":"","code":"mass_combine(   ms1,   ms2,   optimize = TRUE,   rt_delta = 0.5,   mz_delta = 15,   minimum_intensity = 10,   iso_method = \"manual\",   eps = 0.1,   rt_iso_threshold = 0.01,   mz_iso_threshold = 2,   match_method = \"unsupervised\",   smooth_method = \"gam\",   weights = c(1, 1, 1),   log = NULL,   output = NULL,   n_iter = 50,   ... )"},{"path":"https://omicseye.github.io/massSight/reference/mass_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass Combine — mass_combine","text":"ms1 massSight object representing results preprocessed LC-MS experiment serve reference dataset. ms2 massSight object representing results second preprocessed LC-MS experiment aligned ms1. optimize Logical: whether optimize alignment parameters using known metabolites. Default TRUE rt_delta Numeric: retention time window (+/-) minutes consider aligning features. Default 0.5. mz_delta Numeric: mass--charge ratio window (+/-) ppm consider aligning features. Default 15. minimum_intensity Numeric: minimum intensity threshold features considered alignment. Default 10. iso_method Character: method isolating high-quality features modeling drift. Options \"manual\" \"dbscan\". Default \"manual\". eps Numeric: epsilon parameter DBSCAN clustering iso_method = \"dbscan\". Default 0.1. rt_iso_threshold Numeric: retention time similarity threshold manual isolation. Default 0.01. mz_iso_threshold Numeric: m/z similarity threshold manual isolation. Default 2. match_method Character: method initial feature matching. Options \"unsupervised\" (uses features) \"supervised\" (uses known metabolites). Default \"unsupervised\". smooth_method Character: method smoothing systematic drift. Options \"gam\", \"bayesian_gam\", \"gp\". Default \"gam\". weights Numeric vector: weights RT, m/z, intensity alignment scoring. Default c(1, 1, 1). log Character: path save log file. Set NULL disable logging. Default NULL. output Character: directory save output files. Default NULL (current directory). n_iter Integer: number optimization iterations optimize=TRUE. Default 50. ... Additional arguments passed internal functions.","code":""},{"path":"https://omicseye.github.io/massSight/reference/mass_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass Combine — mass_combine","text":"MergedMSObject containing: Original ms1 ms2 objects Matched features datasets Drift correction models Alignment quality metrics","code":""},{"path":"https://omicseye.github.io/massSight/reference/mass_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass Combine — mass_combine","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default parameters combined <- mass_combine(ms1_data, ms2_data)  # Use optimization with known metabolites combined <- mass_combine(ms1_data, ms2_data,                         optimize = TRUE,                         n_iter = 50)  # Custom parameters for stricter matching combined <- mass_combine(ms1_data, ms2_data,                         rt_delta = 0.3,                         mz_delta = 10,                         minimum_intensity = 100) } # }"},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":null,"dir":"Reference","previous_headings":"","what":"ML Match — ml_match","title":"ML Match — ml_match","text":"Trains, fits, uses machine learning model known metabolite data predict unknown metabolite pair matches.","code":""},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ML Match — ml_match","text":"","code":"ml_match(ms1, ms2, mz_thresh = 15, rt_thresh = 1, prob_thresh = 0.5, seed = 72)"},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ML Match — ml_match","text":"ms1 massSight object representing results preprocessed LC-MS experiment ms2 massSight object representing results second preprcoessed LC-MS experiment mz_thresh numeric Mass Charge threshold. Used limit potential matches metabolites. rt_thresh numeric Retention Time threshold. Used limit potential matches metabolites seed Seed value reproducibility","code":""},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ML Match — ml_match","text":"dataframe consisting predicted metabolite pairs","code":""},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ML Match — ml_match","text":"function requires semi-annotated data (metabolites must named)","code":""},{"path":"https://omicseye.github.io/massSight/reference/ml_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ML Match — ml_match","text":"","code":"if (FALSE) { # \\dontrun{ ml_match(ms1, ms2, mz_thresh = 15, rt_thresh = .5, seed = 2) } # }"},{"path":"https://omicseye.github.io/massSight/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://omicseye.github.io/massSight/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://omicseye.github.io/massSight/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://omicseye.github.io/massSight/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://omicseye.github.io/massSight/reference/run_massSight_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch massSight Shiny App — run_massSight_app","title":"Launch massSight Shiny App — run_massSight_app","text":"Launches Shiny web application provides graphical user interface mass_combine() function. allows users interactively align analyze LC-MS data without writing code.","code":""},{"path":"https://omicseye.github.io/massSight/reference/run_massSight_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch massSight Shiny App — run_massSight_app","text":"","code":"run_massSight_app()"},{"path":"https://omicseye.github.io/massSight/reference/run_massSight_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch massSight Shiny App — run_massSight_app","text":"Launches Shiny application user's default web browser","code":""},{"path":[]},{"path":"https://omicseye.github.io/massSight/news/index.html","id":"masssight-030","dir":"Changelog","previous_headings":"","what":"massSight 0.3.0","title":"massSight 0.3.0","text":"Changed auto_combine() mass_combine() Fixed bug auto_combine() prevented combining MSObjects labeled metabolites Fixed bug auto_combine() prevented combining MSObjects intensity column Added linear smoothing MZ drift Added linear smoothing RT drift Added pref argument mass_combine() allow pool reference based alignment Enhanced get_unique_matches() additional metadata columns (MZ, RT, Metabolite) Added Shiny app interface via run_massSight_app() Improved Bayesian optimization mass_combine Added comprehensive test suite mass_combine functionality Code reformatting across multiple files better readability maintainability Enhanced ml_match() advanced machine learning-based metabolite matching features Added improved feature engineering accurate metabolite matching Added semi-supervised learning capabilities ml_match() better performance limited labeled data Added configurable options intensity-based feature usage matching algorithms","code":""},{"path":"https://omicseye.github.io/massSight/news/index.html","id":"masssight-022","dir":"Changelog","previous_headings":"","what":"massSight 0.2.2","title":"massSight 0.2.2","text":"Working auto_scale() function scaling metabolite features Fixed logging feature auto_combine()","code":""},{"path":"https://omicseye.github.io/massSight/news/index.html","id":"masssight-021","dir":"Changelog","previous_headings":"","what":"massSight 0.2.1","title":"massSight 0.2.1","text":"Fixed bug final_plots() prevented display matched metabolites Removed pre-isolation matching auto_combine()","code":""},{"path":"https://omicseye.github.io/massSight/news/index.html","id":"masssight-020","dir":"Changelog","previous_headings":"","what":"massSight 0.2.0","title":"massSight 0.2.0","text":"Added robust plotting features auto_combine() output can now used input future auto_combine() calls Ported get_vectors() C++","code":""},{"path":"https://omicseye.github.io/massSight/news/index.html","id":"masssight-010","dir":"Changelog","previous_headings":"","what":"massSight 0.1.0","title":"massSight 0.1.0","text":"Initial GitHub release","code":""}]
